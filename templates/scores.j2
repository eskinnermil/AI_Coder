{% extends 'base.html' %}

{% block content %}
<div class="search-sidebar">

  <h2>Find a Score</h2>

  <input type="text" id="name-filter" placeholder="Search by name">

  <button id="search-btn">Search</button>

</div>

<div class="main-content">
  <h1>All Scores for Quiz: {{ quiz_name }}</h1>
  <button onclick="location.href='{{ url_for('user_profile') }}'" type="button">View Profile</button>
  <button onclick="location.href='{{ url_for('add_authorization', url='quizzes') }}'" type="button">View Quizzes</button>
</div>
<div class="main-content">
<table class="quiz-table">
  <thead>
    <tr>
      <th onclick="sortTable(0)">
        Candidate Name
        <span class="sort-icon">&#x25B2;&#x25BC;</span>
      </th>
      <th onclick="sortTable(1)">
        Percent Score
        <span class="sort-icon">&#x25B2;&#x25BC;</span>
      </th>
      <th onclick="sortTable(2)">
        Raw Score
        <span class="sort-icon">&#x25B2;&#x25BC;</span>
      </th>
      <th onclick="sortTable(3)">
        Time Taken
        <span class="sort-icon">&#x25B2;&#x25BC;</span>
      </th>
    </tr>
  </thead>

  <tbody>
    {% for score in scores %}
    <tr>
      <td>{{ score.CandidateName }}</td>
      <td>{{ score.PercentScore }}</td>
      <td>{{ score.RawScore }}</td>
      <td>{{ score.TimeTaken }}</td>
      <td>
        <a href="{{ url_for('view_scores.delete_get_score', quiz_id=score.QuizID, score_id=score.id) }}">
          View Score
        </a>
      </td>
    </tr>
    {% endfor %}
  </tbody>
</table>
</div>

<div class="main-content">
  <h1>{{quiz_name}} Score Chart</h1>
  <div id="scatter-container" class="scatter-chart-container">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <canvas id="scatter-chart" width="800" height="400"></canvas>
  </div>
</div>

<script>
// Create a function to generate the scatter plot
function createScatterPlot(scores) {
  const labels = scores.map(score => score.CandidateName);
  const data = scores.map(score => ({
    x: parseFloat(score.PercentScore.replace('%', '')),
    y: parseFloat(score.PercentScore.replace('%', '')),
    name: score.CandidateName,
    percent: score.PercentScore // Add the percent score as a property
  }));

  const ctx = document.getElementById('scatter-chart').getContext('2d');
  new Chart(ctx, {
    type: 'scatter',
    data: {
      datasets: [{
        label: 'Candidates',
        data: data,
        backgroundColor: 'rgba(75, 192, 192, 0.6)', // Adjust as needed
        borderColor: 'rgba(75, 192, 192, 1)', // Adjust as needed
        borderWidth: 1,
        pointRadius: 8, // Adjust the point size
        pointHoverRadius: 10 // Adjust the point size on hover
      }]
    },
    options: {
      scales: {
        x: {
          type: 'linear',
          position: 'bottom',
          title: {
            display: true,
            text: 'Percent Score'
          }
        },
        y: {
          title: {
            display: true,
            text: 'Percent Score'
          }
        }
      },
      plugins: {
        tooltip: {
          callbacks: {
            // Customize tooltip text to show candidate's name and percent score
            label: function(context) {
              const candidate = data[context.dataIndex];
              return `${candidate.name}: ${candidate.percent}`;
            }
          }
        }
      },
      responsive: false, // Allow the chart to be responsive
      maintainAspectRatio: false, // Allow the aspect ratio to change
    }
  });
}

// Call the function to create the scatter plot after the document loads
document.addEventListener('DOMContentLoaded', () => {
  const scores = JSON.parse('{{ scores|tojson|safe }}'); // Convert scores to a JavaScript array
  createScatterPlot(scores);
});

  const filterTable = () => {

    const query = document.getElementById('name-filter').value;

    const rows = document.querySelectorAll('tbody tr');

    console.log(query);

    rows.forEach(row => {
      const nameCell = row.firstElementChild;

      console.log(nameCell.textContent);

      if (nameCell.textContent.includes(query)) {
        row.style.display = "";
      } else {
        row.style.display = "none";
      }
    })

  }

  document.getElementById('search-btn').addEventListener('click', filterTable);

  // Store the current sorting state for each column
  const sortState = { 0: 'asc', 1: 'asc', 2: 'asc', 3: 'asc' };

  // Function to sort the table by a specific column (columnIndex)
  function sortTable(columnIndex) {
    const table = document.querySelector('table');
    const tbody = table.querySelector('tbody');
    const rows = Array.from(tbody.querySelectorAll('tr'));

    rows.sort((a, b) => {
      const aValue = a.children[columnIndex].textContent;
      const bValue = b.children[columnIndex].textContent;

      if (columnIndex === 0) {
        // Sort by candidate name (alphabetically)
        return aValue.localeCompare(bValue);
      } else {
        // Convert other columns to numeric values for proper sorting
        return parseFloat(aValue) - parseFloat(bValue);
      }
    });

    // Check the current sorting state and reverse the order if needed
    if (sortState[columnIndex] === 'asc') {
      rows.reverse();
      sortState[columnIndex] = 'desc';
    } else {
      sortState[columnIndex] = 'asc';
    }

    // Update the arrow icons to indicate the sorting direction
    const thCells = table.querySelectorAll('thead th');
    thCells.forEach((th, index) => {
      const sortIcon = th.querySelector('.sort-icon');
      if (index === columnIndex) {
        sortIcon.innerHTML = sortState[columnIndex] === 'asc' ? '&#x25B2;' : '&#x25BC;';
      } else {
        sortIcon.innerHTML = '&#x25B2;&#x25BC;';
      }
    });

    // Clear the table body and reappend the sorted rows
    while (tbody.firstChild) {
      tbody.removeChild(tbody.firstChild);
    }

    rows.forEach(row => {
      tbody.appendChild(row);
    });
  }
</script>

<style>
  /* Style for the arrow icons */
  .sort-icon {
    font-size: 10px;
    margin-left: 4px;
    display: inline-block;
  }
</style>

{% endblock %}
